// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	cart "webinar-testing/pkg/models/cart"

	mock "github.com/stretchr/testify/mock"
)

// CartStorager is an autogenerated mock type for the CartStorager type
type CartStorager struct {
	mock.Mock
}

type CartStorager_Expecter struct {
	mock *mock.Mock
}

func (_m *CartStorager) EXPECT() *CartStorager_Expecter {
	return &CartStorager_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, order
func (_m *CartStorager) Add(ctx context.Context, order cart.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cart.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CartStorager_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type CartStorager_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - order cart.Order
func (_e *CartStorager_Expecter) Add(ctx interface{}, order interface{}) *CartStorager_Add_Call {
	return &CartStorager_Add_Call{Call: _e.mock.On("Add", ctx, order)}
}

func (_c *CartStorager_Add_Call) Run(run func(ctx context.Context, order cart.Order)) *CartStorager_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cart.Order))
	})
	return _c
}

func (_c *CartStorager_Add_Call) Return(_a0 error) *CartStorager_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CartStorager_Add_Call) RunAndReturn(run func(context.Context, cart.Order) error) *CartStorager_Add_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserID provides a mock function with given fields: ctx, id
func (_m *CartStorager) GetByUserID(ctx context.Context, id cart.UserID) (cart.Cart, error) {
	ret := _m.Called(ctx, id)

	var r0 cart.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cart.UserID) (cart.Cart, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cart.UserID) cart.Cart); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(cart.Cart)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cart.UserID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CartStorager_GetByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserID'
type CartStorager_GetByUserID_Call struct {
	*mock.Call
}

// GetByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - id cart.UserID
func (_e *CartStorager_Expecter) GetByUserID(ctx interface{}, id interface{}) *CartStorager_GetByUserID_Call {
	return &CartStorager_GetByUserID_Call{Call: _e.mock.On("GetByUserID", ctx, id)}
}

func (_c *CartStorager_GetByUserID_Call) Run(run func(ctx context.Context, id cart.UserID)) *CartStorager_GetByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cart.UserID))
	})
	return _c
}

func (_c *CartStorager_GetByUserID_Call) Return(_a0 cart.Cart, _a1 error) *CartStorager_GetByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CartStorager_GetByUserID_Call) RunAndReturn(run func(context.Context, cart.UserID) (cart.Cart, error)) *CartStorager_GetByUserID_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewCartStorager interface {
	mock.TestingT
	Cleanup(func())
}

// NewCartStorager creates a new instance of CartStorager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCartStorager(t mockConstructorTestingTNewCartStorager) *CartStorager {
	mock := &CartStorager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
