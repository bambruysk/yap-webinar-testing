// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"
	cart "webinar-testing/pkg/models/cart"

	mock "github.com/stretchr/testify/mock"
)

// WarehouseConnector is an autogenerated mock type for the WarehouseConnector type
type WarehouseConnector struct {
	mock.Mock
}

type WarehouseConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *WarehouseConnector) EXPECT() *WarehouseConnector_Expecter {
	return &WarehouseConnector_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, goodId
func (_m *WarehouseConnector) Check(ctx context.Context, goodId cart.GoodID) (int, error) {
	ret := _m.Called(ctx, goodId)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cart.GoodID) (int, error)); ok {
		return rf(ctx, goodId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cart.GoodID) int); ok {
		r0 = rf(ctx, goodId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cart.GoodID) error); ok {
		r1 = rf(ctx, goodId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WarehouseConnector_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type WarehouseConnector_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - goodId cart.GoodID
func (_e *WarehouseConnector_Expecter) Check(ctx interface{}, goodId interface{}) *WarehouseConnector_Check_Call {
	return &WarehouseConnector_Check_Call{Call: _e.mock.On("Check", ctx, goodId)}
}

func (_c *WarehouseConnector_Check_Call) Run(run func(ctx context.Context, goodId cart.GoodID)) *WarehouseConnector_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cart.GoodID))
	})
	return _c
}

func (_c *WarehouseConnector_Check_Call) Return(n int, err error) *WarehouseConnector_Check_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *WarehouseConnector_Check_Call) RunAndReturn(run func(context.Context, cart.GoodID) (int, error)) *WarehouseConnector_Check_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewWarehouseConnector interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseConnector creates a new instance of WarehouseConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseConnector(t mockConstructorTestingTNewWarehouseConnector) *WarehouseConnector {
	mock := &WarehouseConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
